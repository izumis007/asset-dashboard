services:
  postgres:
    image: postgres:16-alpine
    container_name: asset_dashboard_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-asset_dashboard}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - asset_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: asset_dashboard_redis
    command: redis-server
    ports:
      - "6379:6379"
    networks:
      - asset_network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: asset_dashboard_backend
    env_file:
      - .env
    environment:
      # 🔧 修正: 統一された環境変数設定
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-asset_dashboard}
      REDIS_URL: redis://redis:6379/0
      TZ: Asia/Tokyo
      LOG_LEVEL: DEBUG 
    volumes:
      - ./backend:/app
      - .env:/app/.env 
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - asset_network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: asset_dashboard_celery_worker
    env_file:
      - .env
    environment:
      # 🔧 修正: 統一された環境変数設定
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-asset_dashboard}
      REDIS_URL: redis://redis:6379/0
      TZ: Asia/Tokyo
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - redis
    networks:
      - asset_network
    restart: unless-stopped
    command: celery -A app.tasks.scheduled_tasks:celery_app worker --loglevel=info

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: asset_dashboard_celery_beat
    env_file:
      - .env
    environment:
      # 🔧 修正: 統一された環境変数設定
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-asset_dashboard}
      REDIS_URL: redis://redis:6379/0
      TZ: Asia/Tokyo
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - redis
    networks:
      - asset_network
    restart: unless-stopped
    command: celery -A app.tasks.scheduled_tasks:celery_app beat --loglevel=info

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: asset_dashboard_frontend
    environment:
      # 🔧 修正: ホストのlocalhostを明示的に指定
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NODE_ENV: development
      TZ: Asia/Tokyo
      # 🔧 追加: Watchman設定（ファイル監視の問題を回避）
      WATCHPACK_POLLING: true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - asset_network
    restart: unless-stopped
    command: npm run dev

  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: asset_dashboard_scraper
    env_file:
      - .env
    environment:
      API_URL: http://backend:8000
      TZ: Asia/Tokyo
    volumes:
      - ./scraper:/app
    depends_on:
      - backend
    networks:
      - asset_network
    restart: unless-stopped

  caddy:
    image: caddy:2-alpine
    container_name: asset_dashboard_caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - backend
    networks:
      - asset_network
    restart: unless-stopped

volumes:
  postgres_data:
  caddy_data:
  caddy_config:

networks:
  asset_network:
    driver: bridge